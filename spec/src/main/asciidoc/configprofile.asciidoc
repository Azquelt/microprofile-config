//
// Copyright (c) 2020 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Contributors:
// Emily Jiang


[[configprofile]]
== Config Profile

Config Profile indicates the project phase, such as dev, testing, live, etc. 

=== Specify Config Profile

The config profile can be specified via a system property or an environment viable `mp.config.profile`. It can be set when starting your microservice. The value of the property can contain only characters that are valid for config property names. 
This is because the name of the profile is directly stored in the name of the config property. e.g.

[source, text]
----
java -jar myapp.jar -Dmp.config.profile=testing
----

The property `mp.config.profile` is only read once on microservice starting. Any changes after that is ignored. Furthermore, the value specifies a single profile. Only one profile can be active at a time.
Commas in the value have no special meaning. For example, if the value of `mp.config.profile` is `testing,live`,  a single profile named `testing,live` is enabled instead of enabling two profiles. 

=== How Config Profile works

In supporting the Config Profile, the config property names will need to start with the naming convention of `%configProfile.`, (e.g. `%live.vehicle.name`).

For an instance, a config source can be specified as follows.

[source, text]
----
%dev.vehicle.name=car
%live.vehicle.name=train
%testing.vehicle.name=bike
vehicle.name=lorry
----

A config property associated with the Config Profile can be looked up as shown below.

[source, text]
----
@Inject @ConfigProperty(name="vehicle.name") String vehicleName;
----

[source, text]
----
String vehicleName = ConfigProvider.getConfig().getValue("vehicle.name", String.class);
----

If the system property or environment variable `mp.config.profile` is set to `dev`, the property `%dev.vehicle.name` is the Active Property. An active property overrides the properties in the same config source. 
In more details, if `mp.config.profile` is set to `dev`, the property `%dev.vehicle.name` overrides the property `vehicle.name`. The `vehicleName` will be set to `car`.
The properties `%live.vehicle.name` and `%testing.vehicle.name` are inactive config properties and don't override the property `vehicle.name`.

If `mp.config.profile` is set to `live`, the property `%live.vehicle.name` is the active property. The `vehicleName` will be `train`. Similarly, `bike` will be the value of `vehicleName`, if the profile is `testing`.

Conforming implementations are required to search for a configuration source with the highest ordinal (priority) that provides either the property name or the "profile-specific" property name. 
If the configuration source provides the "profile-specific" name, the value of the "profile-specific" property will be returned. If it doesn't contain the "profile-specific" name, the value of the plain property will be returned. 
A "profile-specific" property name is defined as a property whose name consists of the following sequence: `% <profile name>.<original property name>`.

The above algorithm applies to the following programmatic lookup as well.


